I will start the fullStackOpen's excercise 4.1 by listing the necesary steps to make the solicitude a functional npm project.

0. npm init to initializate project

1. Install dependencies: 
    a - Express 
    b - mongoose
    c - nodemon ?
    d - cors
    e - dotenv

2. Create index.js file and .env file
    a - import express, cors and mongoose
    
3. Create mongoDB and set connection with the mongoDB
    a - set connection to mongoDB
    b - create schema and model
    c - create models dir with the blog mongoose model and the respective connection in order to isolate this

4. Create routes
    a - get('/api/blogs')
    b - post('/api/blogs')

5. Create middleware like logger and errorhandler

6. testing backend with postman or vs code rest


Excercise 4.2:

├── index.js           done
├── app.js             done
├── dist               ----
│   └── ...            ----
├── controllers        done
│   └── blogs.js        done
├── models              done
│   └── blog.js           done
├── package-lock.json  done
├── package.json       done
├── utils               done
│   ├── config.js       done
│   ├── logger.js       done
│   └── middleware.js  done

Exercise 4.3:

    1. create utils/list_helper.js      done
    2. define dummy() function          done
    3. create tests/***.test.js         done
    4. creat test script "test": "node --test"      done


Ejercicio 4.6:
Tengo que crear una función que reciba un arreglo de BLOGS y devuelva el autor con la mayor cantidad de blogs escritos

Ejercicio 4.8: Blog List Tests, step 1
En curso -> ya di de alta el test environment e instalé superterst. Queda crear los test y reescribir la app
-COMPLETADO-

Ejercicio 4.9: Blog List Tests, step 2
-COMPLETADO-

Ejercicio 4.10: Blog List Tests, step 3 - testear el método POST
-COMPLETADO-

Ejercicio 4.11: Blog List Tests, step 4 - Chequear que si falta la propiedad likes entonces el valor deault es 0, crear test
RESOLUCION: modifiqué el blogSchema del archivo /models/blog.js para que likes defaultee a 0, luego cree el test "if likes property is missing then default to value 0"
-COMPLETADO-

Ejercicio 4.12: Blog List Tests, step 5 - Crear 2 tests en los cuales falten las propiedades TITLE y URL. Modificar el backend para que esto de error.
-COMPLETADO-

Ejercicio 4.13: Blog List Expansions, step 1, Implement functionality for deleting a single blog post resource.
Agregue la funcionalidad para eliminar un blog. Cree el primer test que verifica que se elimina un blog valido, falta testear que falla si ponemos un id equivocado o id vacio
-COMPLETADO-

Ejercicio 4.14: Blog List Expansions, step 2
Implement functionality for updating the information of an individual blog post. Use async/await
creado test que verifica la correcta actualizacion de un blog valido, el test que verifica el funcionamiento ante un ID que no existe en la lista y el comportamiento ante un ID inválido (longitud inválida).
-COMPLETADO- 

Ejercicio 4.15: Blog list expansion, step 3
Implement a way to create new users by doing an HTTP POST request to address api/users. Users have a username, password and name.
Do not save passwords to the database as clear text, but use the bcrypt library like we did in part 4 chapter Creating users.
1. Crear el "user model" en la carpeta "models" y el userSchema 
    -> user.js creado dentro de la carpeta models; creado el User model basado en userSchema

2. Expandir el Schema de los blogs para que tengan información del usuario que los crea, carpeta models archivo blog.js
    -> archivo actualizado, sumé la propiedad "user" al blogSchema

3. Instalar bcrypt ya que será la librería que maneje la encriptación de las contraseñas
-> npm install bcrypt -> instalado

4. Crear un nuevo archivo /controllers/users que contenga un nuevo "router" para gestionar los usuarios. También debemos importarlo y ponerlo en uso en el archivo app.js para que gestione las requests en la ruta /api/users
-> modificado el archivo app.js (import ... app.use ...)
-> creado /controllers/users.js

5. deinifir uniqueness al atributo username del userSchema 
-> hecho


6. definir algunos tests para la creación de usuarios
-> de momento sigo, no lo hago, queda para después (siguientes ejercicios)

