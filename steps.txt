I will start the fullStackOpen's excercise 4.1 by listing the necesary steps to make the solicitude a functional npm project.

0. npm init to initializate project

1. Install dependencies: 
    a - Express 
    b - mongoose
    c - nodemon ?
    d - cors
    e - dotenv

2. Create index.js file and .env file
    a - import express, cors and mongoose
    
3. Create mongoDB and set connection with the mongoDB
    a - set connection to mongoDB
    b - create schema and model
    c - create models dir with the blog mongoose model and the respective connection in order to isolate this

4. Create routes
    a - get('/api/blogs')
    b - post('/api/blogs')

5. Create middleware like logger and errorhandler

6. testing backend with postman or vs code rest


Excercise 4.2:

├── index.js           done
├── app.js             done
├── dist               ----
│   └── ...            ----
├── controllers        done
│   └── blogs.js        done
├── models              done
│   └── blog.js           done
├── package-lock.json  done
├── package.json       done
├── utils               done
│   ├── config.js       done
│   ├── logger.js       done
│   └── middleware.js  done

Exercise 4.3:

    1. create utils/list_helper.js      done
    2. define dummy() function          done
    3. create tests/***.test.js         done
    4. creat test script "test": "node --test"      done

Ejercicio 4.4:
-COMPLETADO-

Ejercicio 4.5:
-COMPLETADO-

Ejercicio 4.6:
Tengo que crear una función que reciba un arreglo de BLOGS y devuelva el autor con la mayor cantidad de blogs escritos
- Creada la función mostBlogs en el archivo /utils/list_helper.js
- Cree una nueva ruta en el archivo /controllers/blogs.js para hacer una solicitud GET a la api /api/blogs/mostblogs que utiliza la función mostBlogs para mostrar el usuario que más blogs tiene creados
-Completado al final de la unidad 4-


Ejercicio 4.8: Blog List Tests, step 1
En curso -> ya di de alta el test environment e instalé superterst. Queda crear los test y reescribir la app
-COMPLETADO-

Ejercicio 4.9: Blog List Tests, step 2
-COMPLETADO-

Ejercicio 4.10: Blog List Tests, step 3 - testear el método POST
-COMPLETADO-

Ejercicio 4.11: Blog List Tests, step 4 - Chequear que si falta la propiedad likes entonces el valor deault es 0, crear test
RESOLUCION: modifiqué el blogSchema del archivo /models/blog.js para que likes defaultee a 0, luego cree el test "if likes property is missing then default to value 0"
-COMPLETADO-

Ejercicio 4.12: Blog List Tests, step 5 - Crear 2 tests en los cuales falten las propiedades TITLE y URL. Modificar el backend para que esto de error.
-COMPLETADO-

Ejercicio 4.13: Blog List Expansions, step 1, Implement functionality for deleting a single blog post resource.
Agregue la funcionalidad para eliminar un blog. Cree el primer test que verifica que se elimina un blog valido, falta testear que falla si ponemos un id equivocado o id vacio
-COMPLETADO-

Ejercicio 4.14: Blog List Expansions, step 2
Implement functionality for updating the information of an individual blog post. Use async/await
creado test que verifica la correcta actualizacion de un blog valido, el test que verifica el funcionamiento ante un ID que no existe en la lista y el comportamiento ante un ID inválido (longitud inválida).
-COMPLETADO- 

Ejercicio 4.15: Blog list expansion, step 3
Implement a way to create new users by doing an HTTP POST request to address api/users. Users have a username, password and name.
Do not save passwords to the database as clear text, but use the bcrypt library like we did in part 4 chapter Creating users.
1. Crear el "user model" en la carpeta "models" y el userSchema 
    -> user.js creado dentro de la carpeta models; creado el User model basado en userSchema

2. Expandir el Schema de los blogs para que tengan información del usuario que los crea, carpeta models archivo blog.js
    -> archivo actualizado, sumé la propiedad "user" al blogSchema

3. Instalar bcrypt ya que será la librería que maneje la encriptación de las contraseñas
-> npm install bcrypt -> instalado

4. Crear un nuevo archivo /controllers/users que contenga un nuevo "router" para gestionar los usuarios. También debemos importarlo y ponerlo en uso en el archivo app.js para que gestione las requests en la ruta /api/users
-> modificado el archivo app.js (import ... app.use ...)
-> creado /controllers/users.js

5. deinifir uniqueness al atributo username del userSchema 
-> hecho

6. definir algunos tests para la creación de usuarios
-> de momento sigo, no lo hago, queda para después (siguientes ejercicios)


Ejercicio 4.16*: Blog List Expansion, step 4
Add a feature which adds the following restrictions to creating new users: Both username and password must be given and both must be at least 3 characters long. The username must be unique.
The operation must respond with a suitable status code and some kind of an error message if an invalid user is created.

Also, implement tests that ensure invalid users are not created and that an invalid add user operation returns a suitable status code and error message.

1. las restricciones las tenemos que hacer en el backend, en el controlador de rutas que gestionan la creación de usuarios.
-> modificado el errorHandler para que contemple el intento de duplicación de username, devuelve status 400 y error: 'expected `username` to be unique'
->tengo que crear las validaciones de 3 letras en el backend para username y password
->HECHOOOO soy un fenómeno, también cree unas pruebas REST para probar el funcionamiento

2. tenemos que crear los tests
cree /tests/users_api.test.js y algunos test, falta testear POST cuando falla uniqueness, cuando el usuario es menor a tres caracteres y cuando lo es la contraseña

=> COMPLETADO

Ejercicio 4.17: Blog List Expansion, step 5
Expand blogs so that each blog contains information on the creator of the blog.
Modify adding new blogs so that when a new blog is created, any user from the database is designated as its creator (for example the one found first). Implement this according to part 4 chapter populate. Which user is designated as the creator does not matter just yet. The functionality is finished in exercise 4.19.
Modify listing all blogs so that the creator's user information is displayed like the image in the page; and listing all users also displays the blogs created by each user.

1. Agregar la propiedad user a los blogSchema
-> listo, lo había hecho previamente
2. Modificar el método POST de los blogs para que añada info sobre CUALQUIER usuario (en los ejercicios posteriores esto se va a hacer con el usuario correspondiente)
-> modifiqué a mano la base de datos para que los blogs y los usuarios tengan info suficiente para mostrar (que usario creo los blos y que blogs creo cada usuario)
-> arbitrariamente puse el primer ID para todos los nuevos POST que se creen (probado con REST funciona)
-> ahora debo implementar lo de populate
-> listo

=> 4.17 COMPLETADO

Ejercicio 4.18: Blog List Expansion, step 6
Implement token-based authentication according to part 4 chapter Token authentication.

1. install jsonwebtoken -- done
2. create the file controllers/login.js -- done
3. use the loginRouter in the app.js file -- done
4. create the SECRET variable -- done
=> COMPLETADO

Ejercicio 4.19: Blog List Expansion, step 7
Modify adding new blogs so that it is only possible if a valid token is sent with the HTTP POST request. The user identified by the token is designated as the creator of the blog.
1. editar ./controllers/blogs para que trabaje con los TOKENS -- done
2. editar el errorHandler para que gestione los errores de tokens -- done
3. probar la funcionalidad cambiando el post_new_blog.rest usando un token (ejemplo: el del usuario 3) - hecho
=> COMPLETADO

4.20*: Blog List Expansion, step 8
This example (a link in the web) from part 4 shows taking the token from the header with the getTokenFrom helper function in controllers/blogs.js.
If you used the same solution, refactor taking the token to a middleware. The middleware should take the token from the Authorization header and assign it to the token field of the request object.
In other words, if you register this middleware in the app.js file before all routes, routes can access the token with request.token:

1. Crear el middleware tokenExtractor -- hecho
2. usar el middleware tokenExtractor en app.js ANTES que las rutas -- hecho
3. editar blogsRouter para que utilice request.token, la propiedad asignada por el middleware -- hecho
=> COMPLETADO 

4.21*: Blog List Expansion, step 9
Change the delete blog operation so that a blog can be deleted only by the user who added it. Therefore, deleting a blog is possible only if the token sent with the request is the same as that of the blog's creator.
1. Modificado el método DELETE del blogRouter para que filtre las solicitudes que no tengan un token válido y las solicitudes de un token válido pero con otro usuario diferente al que creó el blog
=> completado y testeado con delete_one_blog.rest

4.22*: Blog List Expansion, step 10
Both the new blog creation and blog deletion need to find out the identity of the user who is doing the operation. The middleware tokenExtractor that we did in exercise 4.20 helps but still both the handlers of post and delete operations need to find out who the user holding a specific token is.
Now create a new middleware called userExtractor that identifies the user related to the request and attaches it to the request object. After registering the middleware, the post and delete handlers should be able to access the user directly by referencing request.user:
1. Crear un nuevo middleware en el archivo de middleware llamado userExtractor .. done
2. modificar los metodos post y delete para que ahora utilicen este middleware -- done
3. USAR este middleware pero solo en las rutas post y delete -- done
=> COMPLETADO

4.23*: Blog List Expansion, step 11
After adding token-based authentication the tests for adding a new blog broke down. Fix them. Also, write a new test to ensure adding a blog fails with the proper status code 401 Unauthorized if a token is not provided.
-COMPLETADO-